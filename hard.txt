Hard query 1
Mistral-Nemo response:```sql
SELECT
  p.product_name,
  SUM(o.units) AS total_units_sold,
  (p.price * SUM(o.units)) AS total_revenue
FROM
  orders_content o
JOIN
  products p ON o.product_id = p.product_id
WHERE
  YEAR(o.date) = 2025
GROUP BY
  p.product_name
ORDER BY
  total_revenue DESC
LIMIT 5;
```
Llama3.2 response:WITH RECURSIVE order_products AS (
    SELECT o.order_id, p.product_id, p.product_name, SUM(oc.units) AS total_units,
           (SELECT SUM(p.price * oc.units) FROM orders_content ec JOIN products p ON ec.product_id = p.product_id
            WHERE ec.order_id = o.order_id) AS total_revenue
    FROM orders o JOIN orders_content ec ON o.order_id = ec.order_id
    JOIN products p ON ec.product_id = p.product_id
    GROUP BY o.order_id, p.product_id, p.product_name
)
SELECT product_name, SUM(total_units) AS total_units_sold, SUM(total_revenue) AS total_revenue
FROM order_products
GROUP BY product_name
ORDER BY total_revenue DESC
LIMIT 5;
Gemma response:```sql
SELECT
  p.product_name,
  SUM(oc.units * p.price) AS total_revenue
FROM products AS p
JOIN orders_content AS oc
  ON p.product_id = oc.product_id
JOIN orders AS o
  ON oc.order_id = o.order_id
WHERE
  o.date BETWEEN '2025-01-01' AND '2025-12-31'
GROUP BY
  p.product_name
ORDER BY
  total_revenue DESC
LIMIT 5;
```
Codellama response:```
SELECT p.product_name, SUM(o.units * o.price) AS total_revenue
FROM products p
JOIN orders o ON o.order_id = p.product_id
WHERE date BETWEEN '2025-01-01' AND '2025-12-31'
GROUP BY p.product_name, p.price, o.units
ORDER BY total_revenue DESC
LIMIT 5;
```
Hard query 2
Mistral-Nemo response:```sql
SELECT u.first_name || ' ' || u.last_name AS user_name, o.date, COUNT(DISTINCT oc.product_id) AS product_count
FROM users u
JOIN orders o ON u.user_id = o.user_id
JOIN orders_content oc ON o.order_id = oc.order_id
WHERE EXTRACT(MONTH FROM o.date) = 5 AND YEAR(o.date) = 2025
GROUP BY u.first_name, u.last_name, o.date
HAVING COUNT(DISTINCT oc.product_id) > 3;
```
Llama3.2 response:SELECT DISTINCT T1.first_name ,  T1.last_name ,  T2.date FROM users AS T1 JOIN orders AS T2 ON T1.user_id = T2.user_id JOIN orders_content AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T3.product_id IN (SELECT product_id FROM orders_content GROUP BY order_id HAVING COUNT(DISTINCT product_id)  >  3) AND T2.date BETWEEN '2025-05-01' AND '2025-12-31'
Gemma response:```sql
SELECT
  u.first_name,
  u.last_name,
  o.date,
  COUNT(DISTINCT oc.product_id) AS distinct_products_count
FROM users AS u
JOIN orders AS o
  ON u.user_id = o.user_id
JOIN orders_content AS oc
  ON o.order_id = oc.order_id
WHERE
  o.date BETWEEN '2025-01-01' AND '2025-12-31'
GROUP BY
  u.user_id,
  u.first_name,
  u.last_name,
  o.date
HAVING
  COUNT(DISTINCT oc.product_id) > 3;
```
Codellama response:
```
SELECT u.first_name || ' ' || u.last_name AS "User Name", o.date AS "Order Date", COUNT(DISTINCT pc.product_id) AS "Count of Distinct Products"
FROM users u
JOIN orders o ON o.user_id = u.user_id AND EXTRACT(YEAR FROM o.date) = 2025
JOIN orders_content oc ON oc.order_id = o.order_id
JOIN products p ON p.product_id = pc.product_id
GROUP BY u.user_id, o.date
HAVING COUNT(DISTINCT pc.product_id) > 3;
```
Hard query 3
Mistral-Nemo response:```sql
SELECT
    p.product_name,
    ROUND((COUNT(o.order_id) * 1.0 / COUNT(DISTINCT uc.order_id)) * 100, 2) AS appearance_percentage
FROM
    products p
JOIN
    orders_content uc ON p.product_id = uc.product_id
JOIN
    (
        SELECT order_id
        FROM users u
        JOIN orders o ON u.user_id = o.user_id
        WHERE u.age < 25 AND EXTRACT(YEAR FROM o.date) = 2025
    ) qualifying_orders ON uc.order_id = qualifying_orders.order_id
GROUP BY
    p.product_id, p.product_name
HAVING
    COUNT(o.order_id) * 1.0 / COUNT(DISTINCT uc.order_id) >= 0.5
ORDER BY
    appearance_percentage DESC;
```
Llama3.2 response:SELECT T3.product_name ,  ((T1.count - T2.count::numeric) / T1.count) * 100 FROM ( SELECT T2.product_id ,  SUM(T2.units) AS count FROM orders_content AS T2 JOIN orders AS T1 ON T2.order_id = T1.order_id GROUP BY T2.product_id ) AS T0 JOIN products AS T3 ON T0.product_id = T3.product_id WHERE T3.price > 0 AND ( SELECT COUNT(DISTINCT T4.product_id) FROM ( SELECT product_id ,  SUM(units) AS count FROM orders_content GROUP BY product_id ) AS T1 JOIN orders AS T2 ON T1.product_id = T2.order_id WHERE T2.user_id IN ( SELECT user_id FROM users WHERE age < 25 AND registration_date BETWEEN '2025-01-01' AND '2025-12-31' ) GROUP BY T1.product_id ) AS T2 GROUP BY T3.product_name
Gemma response:```sql
SELECT
  p.product_name,
  (SUM(CASE WHEN o.user_id IN (SELECT user_id FROM users WHERE age < 25) THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT o.order_id)
  ) AS appearance_percentage
FROM products AS p
JOIN orders_content AS oc
  ON p.product_id = oc.product_id
JOIN orders AS o
  ON oc.order_id = o.order_id
WHERE o.user_id IN (SELECT user_id FROM users WHERE age < 25)
GROUP BY p.product_name
HAVING SUM(CASE WHEN o.user_id IN (SELECT user_id FROM users WHERE age < 25) THEN 1 ELSE 0 END) >= (SELECT COUNT(DISTINCT o.order_id) / 2.0);
```
Codellama response:
SELECT products.product_name, ROUND(COUNT(*)*100/(SELECT COUNT(*) FROM orders WHERE users.age < 25),2) AS appearance_percentage
FROM products
JOIN orders ON orders.product_id = products.product_id
JOIN users ON orders.user_id = users.user_id
WHERE users.age < 25
GROUP BY products.product_name
HAVING COUNT(*) >= (SELECT COUNT(*) FROM orders WHERE users.age < 25)*0.5;
Hard query 4
Mistral-Nemo response:SELECT
    EXTRACT(MONTH FROM o.date) AS month_num,
    TO_CHAR(o.date, 'Month') AS month_name,
    COUNT(DISTINCT o.order_id) AS total_orders,
    SUM(occ.units) AS total_units_sold,
    FORMAT($$AVG((o.price * occ.units)), 2$$) AS average_order_value
FROM
    orders o
JOIN
    users u ON o.user_id = u.user_id
LEFT JOIN
    orders_content occ ON o.order_id = occ.order_id AND EXTRACT(YEAR FROM o.date) = 2025
GROUP BY
    month_num
ORDER BY
    month_num;
Llama3.2 response:SELECT 
  EXTRACT(MONTH FROM date) AS "month",
  COUNT(DISTINCT order_id) AS "total orders",
  SUM(units) AS "total units sold",
  AVG(SUM(units) * price / 100) AS "average order value"
FROM orders
JOIN orders_content ON orders.order_id = orders_content.order_id
JOIN products ON orders_content.product_id = products.product_id
WHERE date >= '2025-01-01' AND date <= '2025-12-31'
GROUP BY EXTRACT(MONTH FROM date)
ORDER BY month;
Gemma response:```sql
SELECT
    EXTRACT(MONTH FROM date) AS month_name,
    COUNT(order_id) AS total_orders,
    SUM(units) AS total_units_sold,
    SUM(price * units) / SUM(units) AS average_order_value
FROM orders
WHERE date BETWEEN '2025-01-01' AND '2025-12-31'
GROUP BY month_name
ORDER BY month_name;
```
Codellama response:
SELECT
  EXTRACT(MONTH FROM date) AS month_name,
  COUNT(*) AS total_orders,
  SUM(units) AS total_units_sold,
  AVG(price) AS average_order_value
FROM orders
WHERE EXTRACT(YEAR FROM date) = 2025
GROUP BY month_name
ORDER BY month_name;
Hard query 5
Mistral-Nemo response:```sql
SELECT
    u.user_id,
    CONCAT(u.first_name, ' ', u.last_name) AS full_name,
    COUNT(o.order_id) AS order_count,
    AVG(oc.units * p.price) AS average_order_value,
    PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY AVG(oc.units * p.price)) OVER () AS percentile_rank
FROM
    users u
JOIN
    orders o ON u.user_id = o.user_id
JOIN
    orders_content oc ON o.order_id = oc.order_id
JOIN
    products p ON oc.product_id = p.product_id
WHERE
    EXTRACT(MONTH FROM o.date) BETWEEN 4 AND 6 -- Q2 2025 (April-June)
GROUP BY
    u.user_id, u.first_name, u.last_name
HAVING
    COUNT(o.order_id) >= 2
ORDER BY
    average_order_value DESC,
    percentile_rank DESC;
```
Llama3.2 response:WITH q2_orders AS (
  SELECT orders.order_id, users.first_name, users.last_name
  FROM users 
  JOIN orders ON users.user_id = orders.user_id
  WHERE orders.date BETWEEN '2025-04-01' AND '2025-06-30'
),
top_10_percentile AS (
  SELECT AVG(orders_content.price * orders_content.units) as average_order_value, COUNT(DISTINCT orders_content.product_id)
  FROM orders_content 
  JOIN orders ON orders_content.order_id = orders.order_id
  JOIN users ON orders.user_id = users.user_id
  GROUP BY orders_content.product_id
),
average_orders AS (
  SELECT user_id, AVG(orders_content.price * orders_content.units) as average_order_value
  FROM orders_content 
  JOIN orders ON orders_content.order_id = orders.order_id
  GROUP BY user_id
)
SELECT 
  u.user_id, u.first_name || ' ' || u.last_name AS full_name,
  COALESCE(ao.average_order_value, 0) as order_value,
  COALESCE(au.count, 0) AS order_count, 
  (SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY average_order_value) FROM top_10_percentile) || ' Top 10%'
FROM q2_orders u
JOIN average_orders ao ON u.user_id = ao.user_id
LEFT JOIN average_orders au ON u.user_id = au.user_id 
WHERE au.count >= 2 
GROUP BY u.user_id, u.first_name, u.last_name;
Gemma response:```sql
WITH UserOrderValues AS (
  SELECT
    u.user_id,
    u.first_name,
    u.last_name,
    AVG(o.date - o.date) AS avg_order_value,
    COUNT(o.order_id) AS order_count
  FROM users AS u
  JOIN orders AS o
    ON u.user_id = o.user_id
  WHERE
    o.date BETWEEN '2025-04-01' AND '2025-06-30'
  GROUP BY
    u.user_id,
    u.first_name,
    u.last_name
), RankedUsers AS (
  SELECT
    user_id,
    first_name,
    last_name,
    order_count,
    avg_order_value,
    PERCENT_RANK() OVER (ORDER BY avg_order_value) AS percentile_rank
  FROM UserOrderValues
)
SELECT
  user_id,
  first_name || ' ' || last_name AS full_name,
  order_count,
  avg_order_value,
  CASE
    WHEN percentile_rank <= 0.1
    THEN 'Top ' || CAST(percentile_rank * 100 AS TEXT) || '%'
    ELSE 'Not in top 10%'
  END AS percentile_rank
FROM RankedUsers
ORDER BY
  percentile_rank;
```
Codellama response:```
SELECT u.user_id, CONCAT(u.first_name, ' ', u.last_name) AS full_name, 
       COUNT(*) FILTER (WHERE o.date >= DATE '2025-04-01' AND o.date <= DATE '2025-06-30') AS order_count, 
       AVG(oc.units * p.price) FILTER (WHERE o.date >= DATE '2025-04-01' AND o.date <= DATE '2025-06-30') AS avg_order_value, 
       CASE WHEN AVG(oc.units * p.price) / (SELECT AVG(AVG(oc.units * p.price)) 
                                           FROM orders o JOIN orders_content oc ON o.order_id = oc.order_id JOIN products p ON oc.product_id = p.product_id 
                                           WHERE o.date >= DATE '2025-04-01' AND o.date <= DATE '2025-06-30') > 0.9 THEN 'Top 1%' 
            WHEN AVG(oc.units * p.price) / (SELECT AVG(AVG(oc.units * p.price)) 
                                           FROM orders o JOIN orders_content oc ON o.order_id = oc.order_id JOIN products p ON oc.product_id = p.product_id 
                                           WHERE o.date >= DATE '2025-04-01' AND o.date <= DATE '2025-06-30') > 0.9 THEN 'Top 2%' 
            WHEN AVG(oc.units * p.price) / (SELECT AVG(AVG(oc.units * p.price)) 
                                           FROM orders o JOIN orders_content oc ON o.order_id = oc.order_id JOIN products p ON oc.product_id = p.product_id 
                                           WHERE o.date >= DATE '2025-04-01' AND o.date <= DATE '2025-06-30') > 0.9 THEN 'Top 3%' 
            ELSE 'Below Top 1%' END AS exact_percentile_rank 
FROM users u JOIN orders o ON u.user_id = o.user_id 
JOIN orders_content oc ON o.order_id = oc.order_id 
JOIN products p ON oc.product_id = p.product_id 
WHERE COUNT(*) FILTER (WHERE o.date >= DATE '2025-04-01' AND o.date <= DATE '2025-06-30') >= 2
GROUP BY u.user_id, u.first_name, u.last_name, u.age, u.registration_date;
```
Hard query 6
Mistral-Nemo response:```sql
SELECT
    EXTRACT(QUARTER FROM date) AS quarter,
    SUM(products.price * orders_content.units) AS revenue,
    ROUND(((SUM(products.price * orders_content.units) OVER () - SUM(products.price * orders_content.units) OVER (PARTITION BY EXTRACT(QUARTER FROM date) ORDER BY date)) / SUM(products.price * orders_content.units) OVER (PARTITION BY EXTRACT(QUARTER FROM date))) * 100, 2) AS revenue_growth
FROM
    orders
JOIN
    orders_content ON orders.order_id = orders_content.order_id
JOIN
    products ON orders_content.product_id = products.product_id
WHERE
    EXTRACT(YEAR FROM date) = 2025
GROUP BY
    quarter;
```
Llama3.2 response: SELECT CAST(SUM(CASE WHEN EXTRACT(MONTH FROM o.date) BETWEEN 1 AND 3 THEN p.price * oc.units ELSE 0 END) - LAG(SUM(CASE WHEN EXTRACT(MONTH FROM o.date) BETWEEN 1 AND 3 THEN p.price * oc.units END), 1) AS REAL) / LAG(SUM(CASE WHEN EXTRACT(MONTH FROM o.date) BETWEEN 1 AND 3 THEN p.price * oc.units END)) * 100 / 100 OVER (PARTITION BY user_id ORDER BY date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
Gemma response:```sql
WITH QuarterlyRevenue AS (
    SELECT
        EXTRACT(YEAR FROM date) AS sale_year,
        EXTRACT(QUARTER FROM date) AS sale_quarter,
        SUM(units * price) AS total_revenue
    FROM orders
    WHERE date BETWEEN '2025-01-01' AND '2025-12-31'
    GROUP BY EXTRACT(YEAR FROM date), EXTRACT(QUARTER FROM date)
)
SELECT
    CASE
        WHEN sale_quarter = 1
        THEN (SUM(total_revenue) - LAG(total_revenue, 1, 0) OVER (ORDER BY sale_year, sale_quarter)) * 100.0 / LAG(total_revenue, 1, 0) OVER (ORDER BY sale_year, sale_quarter)
        WHEN sale_quarter = 2
        THEN (SUM(total_revenue) - LAG(total_revenue, 1, 0) OVER (ORDER BY sale_year, sale_quarter)) * 100.0 / LAG(total_revenue, 1, 0) OVER (ORDER BY sale_year, sale_quarter)
        WHEN sale_quarter = 3
        THEN (SUM(total_revenue) - LAG(total_revenue, 1, 0) OVER (ORDER BY sale_year, sale_quarter)) * 100.0 / LAG(total_revenue, 1, 0) OVER (ORDER BY sale_year, sale_quarter)
        WHEN sale_quarter = 4
        THEN (SUM(total_revenue) - LAG(total_revenue, 1, 0) OVER (ORDER BY sale_year, sale_quarter)) * 100.0 / LAG(total_revenue, 1, 0) OVER (ORDER BY sale_year, sale_quarter)
        ELSE 0.0
    END AS revenue_growth_percentage
FROM QuarterlyRevenue
ORDER BY sale_year, sale_quarter;
```
Codellama response:
```
SELECT 
  (1 - (SUM(price) OVER (PARTITION BY EXTRACT(QUARTER FROM date)) / SUM(price) OVER ())) * 100 AS quarterly_revenue_growth_percentage
FROM orders
WHERE EXTRACT(YEAR FROM date) = 2025;
```
Hard query 7
Mistral-Nemo response:SELECT
    p.product_name,
    COUNT(oc.orders_content_id) AS total_units
FROM
    orders_content oc
JOIN
    products p ON oc.product_id = p.product_id
JOIN
    orders o ON oc.order_id = o.order_id
WHERE
    EXTRACT(YEAR FROM o.date) = 2025
GROUP BY
    p.product_name,
    o.date
HAVING
    COUNT(oc.orders_content_id) >= (
        SELECT
            COUNT(*)
        FROM
            orders_content
        WHERE
            order_id IN (
                SELECT
                    order_id
                FROM
                    orders
                WHERE
                    EXTRACT(MONTH FROM date) = MONTH(o.date)
                    AND EXTRACT(YEAR FROM date) = 2025
            )
        )
HAVING
    COUNT(oc.orders_content_id) < (
        SELECT
            MAX(total_units)
        FROM
            (
                SELECT
                    COUNT(*) AS total_units,
                    EXTRACT(MONTH FROM o.date) AS month
                FROM
                    orders_content oc2
                JOIN
                    products p2 ON oc2.product_id = p2.product_id
                JOIN
                    orders o2 ON oc2.order_id = o2.order_id
                WHERE
                    EXTRACT(YEAR FROM o2.date) = 2025
                GROUP BY
                    month,
                    p2.product_name
            ) t
        )
GROUP BY
    p.product_name,
    o.date
Llama3.2 response: SELECT DISTINCT T1.product_name FROM orders AS T2 JOIN orders_content AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id GROUP BY T4.product_id, T4.product_desc, T4.price HAVING COUNT(*) > 2
Gemma response:```sql
SELECT
  p.product_name,
  COUNT(oc.order_id) AS order_count
FROM products AS p
JOIN orders_content AS oc
  ON p.product_id = oc.product_id
JOIN orders AS o
  ON oc.order_id = o.order_id
WHERE
  o.date BETWEEN '2025-01-01' AND '2025-12-31'
GROUP BY
  p.product_name
ORDER BY
  order_count DESC
LIMIT 3;
```
Codellama response:
Here is a possible SQL query to retrieve the list of top-selling products in 2025:
```
SELECT p.*, COUNT(*) AS total_sales
FROM products p
JOIN orders o ON o.product_id = p.product_id
WHERE EXTRACT(YEAR FROM o.date) = 2025
GROUP BY p.product_id
ORDER BY total_sales DESC
LIMIT 3;
```
This query joins the `orders` and `products` tables on the `product_id` column, filters the results to only include orders from 2025 using the `EXTRACT(YEAR FROM o.date) = 2025` condition, groups the results by product using the `GROUP BY` clause, and counts the number of sales for each product using the `COUNT(*)` function. Finally, it sorts the results in descending order based on the total sales count and limits the output to only the top 3 products.
Hard query 8
Mistral-Nemo response:SELECT u.user_id, u.first_name, u.last_name
FROM users u
JOIN (
  SELECT user_id, COUNT(*) AS order_count, SUM(units * price) AS total_value
  FROM orders o
  JOIN orders_content oc ON o.order_id = oc.order_id
  JOIN products p ON oc.product_id = p.product_id
  GROUP BY user_id
) o ON u.user_id = o.user_id
WHERE o.order_count > (SELECT AVG(order_count) FROM (
  SELECT user_id, COUNT(*) AS order_count
  FROM orders
  GROUP BY user_id
)) AND o.total_value < (SELECT AVG(total_value) FROM (
  SELECT user_id, SUM(units * price) AS total_value
  FROM orders_content
  JOIN products ON product_id = product_id
  GROUP BY user_id
))
ORDER BY u.user_id;
Llama3.2 response: SELECT u.* FROM users u JOIN orders o ON u.user_id = o.user_id JOIN ( SELECT user_id, COUNT(*) AS freq , AVG(price) as avg_price FROM orders_content GROUP BY user_id ) oc ON u.user_id = oc.user_id WHERE oc.freq > ( SELECT SUM(freq) / COUNT(DISTINCT user_id) FROM ( SELECT user_id, COUNT(*) AS freq FROM orders_content GROUP BY user_id ) ) AND oc.avg_price < ( SELECT AVG(avg_price) FROM ( SELECT user_id, AVG(price) as avg_price FROM orders_content GROUP BY user_id ) )
Gemma response:```sql
SELECT u.user_id, u.first_name, u.last_name
FROM users u
JOIN (
    SELECT
        o.user_id,
        AVG(o.date) AS avg_order_date,
        AVG(oi.units * p.price) AS avg_order_value
    FROM orders o
    JOIN orders_content oi ON o.order_id = oi.order_id
    JOIN products p ON oi.product_id = p.product_id
    GROUP BY o.user_id
) AS order_stats ON u.user_id = order_stats.user_id
WHERE order_stats.avg_order_date IN (
    SELECT avg_order_date FROM (
        SELECT avg_order_date, COUNT(order_id) AS order_count
        FROM orders
        GROUP BY order_id
    ) AS order_counts
    WHERE order_counts.order_count > (SELECT AVG(order_count) FROM (SELECT order_count FROM (SELECT order_count FROM (SELECT order_count FROM (SELECT order_count FROM (SELECT order_count FROM (SELECT order_count FROM (SELECT order_count FROM (SELECT order_count FROM (SELECT order_count FROM orders) AS tmp1) AS tmp2) AS tmp3) AS tmp4) AS tmp5) AS tmp6) AS tmp7) AS tmp8)
)
AND order_stats.avg_order_value < (SELECT AVG(avg_order_value) FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM (SELECT avg_order_value FROM orders)) AS tmp1) AS tmp2) AS tmp3) AS tmp4) AS tmp5) AS tmp6) AS tmp7) AS tmp8) AS tmp9) AS tmp10) AS tmp11) AS tmp12) AS tmp13) AS tmp14) AS tmp15) AS tmp16) AS tmp17) AS tmp18)
;
```
Codellama response:```
SELECT u.*
FROM users AS u
INNER JOIN (
  SELECT user_id, AVG(units) AS avg_units
  FROM orders_content
  GROUP BY user_id
  HAVING AVG(units) < (
    SELECT AVG(units)
    FROM orders_content
  ) AND AVG(units) > (
    SELECT AVG(units)
    FROM orders_content
  )
) AS subquery ON u.user_id = subquery.user_id;
```
Hard query 9
Mistral-Nemo response:```
SELECT
    u.user_id,
    u.first_name || ' ' || u.last_name AS full_name,
    SUM(oc.units * p.price) AS total_spent_in_2025,
    COUNT(DISTINCT o.order_id) AS num_orders_in_2025,
    SUM(oc.units * p.price) / NULLIF(COUNT(DISTINCT o.order_id), 0) AS average_order_value,
    (SUM(oc.units * p.price) + SUM(oc.units * p.price) * 12 / NULLIF(COUNT(DISTINCT o.order_id), 0)) AS predicted_clv
FROM
    users u
JOIN
    orders o ON u.user_id = o.user_id AND o.date >= '2025-01-01' AND o.date <= '2025-12-31'
JOIN
    orders_content oc ON o.order_id = oc.order_id
JOIN
    products p ON oc.product_id = p.product_id
GROUP BY
    u.user_id,
    u.first_name,
    u.last_name;
```
Llama3.2 response: WITH orders AS (
 SELECT u.user_id, o.order_id, o.date, p.product_name, SUM(o.units * p.price) AS revenue
 FROM users u
 JOIN orders_content oc ON u.user_id = oc.user_id
 JOIN products p ON oc.product_id = p.product_id
 GROUP BY u.user_id, o.order_id, o.date, p.product_name
 ),
 retention AS (
 SELECT user_id, revenue, SUM(CASE WHEN date > current_date - interval '1 year' THEN 1 ELSE 0 END) AS retained_count
 FROM orders
 GROUP BY user_id, revenue
 )
SELECT SUM(retained_count * revenue) AS clv FROM retention
Gemma response:```sql
WITH MonthlyOrders AS (
  SELECT
    DATE_TRUNC('month', o.date) AS order_month,
    COUNT(o.order_id) AS order_count
  FROM orders o
  WHERE DATE_TRUNC('year', o.date) = '2025-01-01'
  GROUP BY DATE_TRUNC('month', o.date)
),
CustomerSpending AS (
  SELECT
    user_id,
    SUM(p.price * oc.units) AS total_spent
  FROM users u
  JOIN orders o ON u.user_id = o.user_id
  JOIN orders_content oc ON o.order_id = oc.order_id
  JOIN products p ON oc.product_id = p.product_id
  WHERE DATE_TRUNC('year', o.date) = '2025-01-01'
  GROUP BY user_id
)
SELECT
  c.user_id,
  c.total_spent,
  COALESCE(clv, 0.0) AS customer_lifetime_value
FROM (
  SELECT
    user_id,
    SUM(total_spent) AS total_spent
  FROM CustomerSpending
  GROUP BY user_id
) AS c,
(
  SELECT
    user_id,
    SUM(total_spent) AS total_spent
  FROM CustomerSpending
  GROUP BY user_id
) AS clv
WHERE clv.user_id = c.user_id;
```
Codellama response:```sql
SELECT c.customer_id, SUM(o.amount) AS total_spent
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id
HAVING MAX(o.order_date) >= '2025-01-01' AND MIN(o.order_date) <= '2025-12-31'
```
Hard query 10
Mistral-Nemo response:```sql
SELECT p.product_name
FROM products p
LEFT JOIN (
  SELECT DISTINCT product_id
  FROM orders_content oc
  JOIN orders o ON oc.order_id = o.order_id
  JOIN users u ON o.user_id = u.user_id
  WHERE u.age >= 40) AS never_purchased ON p.product_id = never_purchased.product_id
LEFT JOIN (
  SELECT product_id, COUNT(*) as popularity
  FROM orders_content
  JOIN orders ON order_id = order_id
  JOIN users ON user_id = user_id
  WHERE age < 25
  GROUP BY product_id) AS popular_under_25 ON p.product_id = popular_under_25.product_id
WHERE never_purchased.product_id IS NULL AND popular_under_25.popularity > (SELECT COUNT(*) FROM orders_content)
```
Llama3.2 response: SELECT p.product_name FROM products p JOIN orders_content o ON p.product_id = o.product_id JOIN orders o2 ON o.order_id = o2.order_id JOIN users u ON o2.user_id = u.user_id WHERE o.units > 0 AND o2.date BETWEEN '2025-01-01' AND '2025-12-31' AND u.age >= 40 GROUP BY p.product_name HAVING COUNT(o2.user_id) <= (SELECT COUNT(DISTINCT user_id) FROM users WHERE age < 25)
Gemma response:```sql
SELECT p.product_name
FROM products p
WHERE p.product_id NOT IN (
    SELECT pc.product_id
    FROM orders_content pc
    JOIN orders o ON pc.order_id = o.order_id
    JOIN users u ON o.user_id = u.user_id
    WHERE u.age > 40
)
AND p.product_id IN (
    SELECT pc.product_id
    FROM orders_content pc
    JOIN orders o ON pc.order_id = o.order_id
    JOIN users u ON o.user_id = u.user_id
    WHERE u.age < 25
);
```
Codellama response:```
SELECT p.product_id, p.product_name, p.price
FROM products p
JOIN orders o ON o.order_id = p.product_id
WHERE o.user_age <= 25
GROUP BY p.product_id
HAVING MAX(o.order_date) < '2015-01-01'
```