
Medium query 1
Mistral-Nemo response:SELECT p.product_name, p.price
FROM products p
LEFT JOIN orders_content oc ON p.product_id = oc.product_id
WHERE oc.orders_content_id IS NULL;
Llama3.2 response:SELECT T1.product_name ,  T1.price FROM products AS T1 LEFT JOIN orders_content AS T2 ON T1.product_id = T2.product_id WHERE T2.orders_content_id IS NULL;
Gemma response:```sql
SELECT p.product_name, p.price
FROM products p
WHERE p.product_id NOT IN (SELECT product_id FROM orders_content);
```
Codellama response:```sql
SELECT p.product_name, p.price
FROM products p
LEFT JOIN orders_content oc ON oc.product_id = p.product_id
WHERE oc.order_id IS NULL;
```
Medium query 2
Mistral-Nemo response:```sql
SELECT SUM(oc.units * p.price) / COUNT(DISTINCT o.order_id)
FROM orders_content oc
JOIN products p ON oc.product_id = p.product_id
JOIN orders o ON oc.order_id = o.order_id
WHERE EXTRACT(YEAR FROM o.date) = 2025;
```
Llama3.2 response:SELECT AVG(T2.price * T1.units) / COUNT(DISTINCT T1.order_id) FROM orders AS T1 INNER JOIN orders_content AS T2 ON T1.order_id = T2.order_id WHERE STRFTIME('%Y', T1.date) = '2025'
Gemma response:```sql
SELECT
  CAST(SUM(o.date as DATE) as INTEGER) / COUNT(o.order_id) AS average_order_value
FROM orders o
WHERE
  o.date BETWEEN '2025-01-01' AND '2025-12-31';
```
Codellama response:```
SELECT AVG(total_revenue) AS avg_order_value
FROM (
  SELECT SUM(price * units) AS total_revenue, count(*) AS order_count
  FROM orders_content
  INNER JOIN products ON orders_content.product_id = products.product_id
  WHERE orders.date BETWEEN '2025-01-01' AND '2025-12-31'
  GROUP BY order_id
) AS subquery;
```
Medium query 3
Mistral-Nemo response:SELECT u.first_name, u.last_name, u.registration_date
FROM users u
LEFT JOIN orders o ON u.user_id = o.user_id AND EXTRACT(YEAR FROM o.date) = 2025
WHERE o.order_id IS NULL;
Llama3.2 response:SELECT T1.first_name ,  T1.registration_date FROM users AS T1 JOIN orders AS T2 ON T1.user_id = T2.user_id WHERE T2.date NOT IN ( SELECT MIN(date) FROM orders WHERE date LIKE '2025-%')
Gemma response:```sql
SELECT
  u.first_name,
  u.last_name,
  u.registration_date
FROM users AS u
WHERE
  u.user_id NOT IN (
    SELECT
      user_id
    FROM orders
    WHERE
      date BETWEEN '2025-01-01' AND '2025-12-31'
  );
```

Codellama response:```sql
SELECT u.first_name, u.last_name, u.registration_date
FROM users u
WHERE NOT EXISTS (
  SELECT *
  FROM orders o
  WHERE o.user_id = u.user_id AND o.date >= '2025-01-01' AND o.date <= '2025-12-31'
)
```
Medium query 4
Mistral-Nemo response:SELECT
    EXTRACT(MONTH FROM date) AS month,
    products.product_name,
    SUM(orders_content.units) AS total_units
FROM
    orders_content
JOIN
    orders ON orders.order_id = orders_content.order_id
JOIN
    products ON products.product_id = orders_content.product_id
WHERE
    EXTRACT(YEAR FROM date) = 2025
GROUP BY
    month, products.product_name
ORDER BY
    month, total_units DESC;
Llama3.2 response:SELECT EXTRACT(MONTH FROM o.date) AS month, p.product_name, SUM(oc.units) AS total_units FROM orders o JOIN orders_content oc ON o.order_id = oc.order_id JOIN products p ON oc.product_id = p.product_id GROUP BY EXTRACT(MONTH FROM o.date), p.product_name ORDER BY total_units DESC LIMIT 1;
Gemma response:```sql
SELECT
  EXTRACT(MONTH FROM o.date) AS month,
  p.product_name,
  SUM(oc.units) AS total_units_sold
FROM orders o
JOIN orders_content oc
  ON o.order_id = oc.order_id
JOIN products p
  ON oc.product_id = p.product_id
WHERE
  EXTRACT(YEAR FROM o.date) = 2025
GROUP BY
  month,
  p.product_name
ORDER BY
  month,
  total_units_sold DESC;
```

Codellama response:```sql
SELECT MONTH(date) AS "Month", products.product_name, SUM(units) AS "Total Units Sold"
FROM orders
JOIN orders_content ON orders.order_id = orders_content.order_id
JOIN products ON products.product_id = orders_content.product_id
WHERE EXTRACT(YEAR FROM date) = 2025
GROUP BY MONTH(date), product_name
ORDER BY SUM(units) DESC;
```
Medium query 5
Mistral-Nemo response:SELECT
    ROUND(COUNT(DISTINCT o.user_id)::FLOAT / COUNT(DISTINCT u.user_id), 2) * 100 AS percentage
FROM
    users u
LEFT JOIN orders o ON u.user_id = o.user_id AND EXTRACT(YEAR FROM o.date) = 2025;
Llama3.2 response:SELECT CAST(SUM(CASE WHEN T2.date LIKE '2025-%' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.user_id) FROM users AS T1 LEFT JOIN orders AS T2 ON T1.user_id = T2.user_id
Gemma response:```postgresql
SELECT
  CAST(SUM(CASE WHEN o.date >= '2025-01-01' AND o.date < '2026-01-01' THEN 1 ELSE 0 END) AS NUMERIC) * 100 / COUNT(DISTINCT o.user_id)
FROM orders o;
```
Codellama response:```sql
SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM users)
FROM orders
WHERE date >= '2025-01-01' AND date <= '2025-12-31';
```
Medium query 6
Mistral-Nemo response:SELECT
    u.first_name || ' ' || u.last_name AS user_name,
    o.date AS order_date
FROM
    users u
JOIN
    orders o ON u.user_id = o.user_id
JOIN
    orders_content oc ON o.order_id = oc.order_id
JOIN
    products p ON oc.product_id = p.product_id
WHERE
    p.product_name = 'X'
AND
    EXTRACT(YEAR FROM o.date) = 2025;
Llama3.2 response:SELECT DISTINCT T2.first_name ,  T2.last_name ,  T1.date FROM orders_content AS T1 INNER JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = 'X' AND STRFTIME('%Y',T1.order_date) = '2025';
Gemma response:```sql
SELECT DISTINCT
  u.first_name,
  u.last_name,
  o.date
FROM users AS u
JOIN orders AS o
  ON u.user_id = o.user_id
JOIN orders_content AS oc
  ON o.order_id = oc.order_id
JOIN products AS p
  ON oc.product_id = p.product_id
WHERE
  p.product_name = 'X' AND EXTRACT(
    YEAR
    FROM o.date
  ) = 2025;
```
Codellama response:Here is a SQL query to find users who ordered product "X" in 2025, showing their names and order dates:
```
SELECT u.first_name, u.last_name, o.date
FROM orders o
JOIN orders_content oc ON o.order_id = oc.order_id
JOIN products p ON p.product_id = oc.product_id
WHERE p.product_name = 'X' AND o.date BETWEEN '2025-01-01' AND '2025-12-31'
```
Medium query 7
Mistral-Nemo response:```sql
SELECT
    u.user_id,
    u.first_name || ' ' || u.last_name AS full_name,
    SUM(o_units * p.price) AS total_revenue_2025
FROM
    users u
JOIN
    orders o ON u.user_id = o.user_id
JOIN
    orders_content oc ON o.order_id = oc.order_id
JOIN
    products p ON oc.product_id = p.product_id
WHERE
    EXTRACT(YEAR FROM o.date) = 2025
GROUP BY
    u.user_id,
    full_name
ORDER BY
    total_revenue_2025 DESC;
```
Llama3.2 response:SELECT T1.first_name ,  SUM(T3.price * T2.units) FROM users AS T1 INNER JOIN orders AS T2 ON T1.user_id = T2.user_id INNER JOIN orders_content AS T3 ON T2.order_id = T3.order_id WHERE STRFTIME('%Y', T3.date) = '2025' GROUP BY T1.first_name ORDER BY SUM(T3.price * T2.units) DESC
Gemma response:```sql
SELECT
  u.user_id,
  SUM(oc.units * p.price) AS total_revenue
FROM users AS u
JOIN orders AS o
  ON u.user_id = o.user_id
JOIN orders_content AS oc
  ON o.order_id = oc.order_id
JOIN products AS p
  ON oc.product_id = p.product_id
WHERE
  o.date BETWEEN '2025-01-01' AND '2025-12-31'
GROUP BY
  u.user_id
ORDER BY
  total_revenue DESC;
```
Codellama response:```
SELECT users.first_name || ' ' || users.last_name AS name, SUM(orders.date BETWEEN '2025-01-01' AND '2025-12-31') * SUM(orders_content.units) AS total_revenue
FROM orders
JOIN orders_content ON orders_content.order_id = orders.order_id
JOIN products ON products.product_id = orders_content.product_id
JOIN users ON users.user_id = orders.user_id
WHERE orders.date BETWEEN '2025-01-01' AND '2025-12-31'
GROUP BY users.first_name, users.last_name
ORDER BY total_revenue DESC;
```
Medium query 8
Mistral-Nemo response:SELECT
    p.product_name,
    AVG(oc.units) AS avg_units_per_order
FROM
    products p
JOIN
    orders_content oc ON p.product_id = oc.product_id
GROUP BY
    p.product_name
HAVING
    AVG(oc.units) > 5;
Llama3.2 response: SELECT p.product_name, AVG(oc.units) as avg_units FROM products p LEFT JOIN orders_content oc ON p.product_id = oc.product_id GROUP BY p.product_id HAVING AVG(oc.units) > 5;
Gemma response:```sql
SELECT
  p.product_name
FROM products AS p
JOIN orders_content AS oc
  ON p.product_id = oc.product_id
GROUP BY
  p.product_name
HAVING
  AVG(oc.units) > 5;
```
Codellama response:
SELECT p.product_id, AVG(oc.units) AS average_units_per_order
FROM products p
JOIN orders o ON o.user_id = 123 AND o.date >= '2025-01-01' AND o.date < '2026-01-01' -- Replace with the user ID and date range of interest
JOIN orders_content oc ON oc.order_id = o.order_id
GROUP BY p.product_id
HAVING AVG(oc.units) > 5;
Medium query 9
Mistral-Nemo response:SELECT
    EXTRACT(MONTH FROM date) AS month,
    COUNT(*) as total_orders
FROM
    orders
WHERE
    EXTRACT(YEAR FROM date) = 2025
GROUP BY
    month
ORDER BY
    total_orders DESC
LIMIT 1;
Llama3.2 response:SELECT EXTRACT(MONTH FROM MAX(date)) AS most_orders_month FROM orders WHERE date >= '2025-01-01' AND date <= '2025-12-31';
Gemma response:```sql
SELECT
  DATE_TRUNC('month', date) AS month
FROM orders
WHERE
  date BETWEEN '2025-01-01' AND '2025-12-31'
GROUP BY
  month
ORDER BY
  COUNT(*) DESC
LIMIT 1;
```

Codellama response:
SELECT EXTRACT(MONTH FROM date) AS month, COUNT(*) AS num_orders
FROM orders
WHERE EXTRACT(YEAR FROM date) = 2025
GROUP BY month
ORDER BY num_orders DESC
LIMIT 1;
Medium query 10
Mistral-Nemo response:SELECT DISTINCT u.user_id
FROM users u
JOIN (
  SELECT user_id, COUNT(DISTINCT EXTRACT(MONTH FROM date)) AS months_ordered
  FROM orders
  GROUP BY user_id
) o ON u.user_id = o.user_id
WHERE o.months_ordered >= 2 AND EXISTS (
  SELECT 1
  FROM orders o2
  WHERE o2.user_id = u.user_id
    AND o2.date BETWEEN '2025-01-01'::DATE AND '2025-12-31'::DATE
    AND EXISTS (
      SELECT 1
      FROM orders_content oc
      WHERE oc.order_id = o2.order_id
        AND oc.units > 0
    )
);
Llama3.2 response:SELECT T1.user_id FROM users AS T1 INNER JOIN orders AS T2 ON T1.user_id = T2.user_id WHERE EXTRACT(MONTH FROM T2.date) IN (EXTRACT(MONTH FROM (SELECT MAX(date) FROM orders)), EXTRACT(MONTH FROM (SELECT MIN(date) FROM orders)))
Gemma response:```sql
SELECT DISTINCT
  U.user_id,
  U.first_name,
  U.last_name
FROM users AS U
JOIN orders AS O
  ON U.user_id = O.user_id
WHERE
  EXTRACT(
    YEAR FROM O.date
  ) = 2025 AND
  (
    EXTRACT(
      MONTH FROM O.date
    ) =
    EXTRACT(
      MONTH FROM
      (
        SELECT
          date
        FROM orders
        WHERE
          EXTRACT(
            YEAR FROM date
          ) = 2025
        ORDER BY
          date DESC
        LIMIT 1
      )
    )
  );
```
Codellama response:```
SELECT DISTINCT u.user_id, u.first_name, u.last_name, u.age, u.registration_date
FROM users u
INNER JOIN orders o ON o.user_id = u.user_id
WHERE o.date BETWEEN '2025-01-01' AND '2025-12-31';
```