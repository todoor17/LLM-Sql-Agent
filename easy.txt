Easy query 1
Mistral-Nemo response:SELECT p.product_name, p.price
FROM products p
ORDER BY p.product_name;
Llama3.2 response:SELECT T2.product_name, T2.price FROM products AS T1 INNER JOIN orders_content AS T2 ON T1.product_id = T2.product_id ORDER BY T2.product_name;
Gemma response:```sql
SELECT product_name, price
FROM products
ORDER BY product_name;
```
Codellama response:```sql
SELECT p.product_name, p.price
FROM products p
ORDER BY p.product_name ASC;
```
Easy query 2
Mistral-Nemo response:SELECT CONCAT(first_name, ' ', last_name) AS full_name, age
FROM users
WHERE age < 30;
Llama3.2 response:SELECT first_name, last_name, age FROM users WHERE age < 30;
Gemma response:```sql
SELECT
  first_name,
  last_name,
  age
FROM users
WHERE
  age < 30;
```

Codellama response:```sql
SELECT first_name || ' ' || last_name AS full_name, age
FROM users
WHERE age < 30;
```
Easy query 3
Mistral-Nemo response:SELECT COUNT(*) FROM orders WHERE EXTRACT(MONTH FROM date) = 3 AND EXTRACT(YEAR FROM date) = 2025;
Llama3.2 response:SELECT COUNT(order_id) FROM orders WHERE date BETWEEN '2025-03-01' AND '2025-03-31';
Gemma response:```sql
SELECT
  COUNT(order_id)
FROM orders
WHERE
  date BETWEEN '2025-03-01' AND '2025-03-31';
```

Codellama response:```sql
SELECT COUNT(*) AS num_orders
FROM orders
WHERE EXTRACT(MONTH FROM date) = 3 AND EXTRACT(YEAR FROM date) = 2025;
```
Easy query 4
Mistral-Nemo response:SELECT o.date, u.last_name
FROM orders o
JOIN users u ON o.user_id = u.user_id
ORDER BY o.date;
Llama3.2 response:SELECT T1.date, T2.last_name FROM orders AS T1 JOIN users AS T2 ON T1.user_id = T2.user_id
Gemma response:```sql
SELECT
  o.date,
  u.last_name
FROM orders AS o
JOIN users AS u
  ON o.user_id = u.user_id;
```
Codellama response:```
SELECT orders.date, users.last_name
FROM orders
JOIN users ON orders.user_id = users.user_id;
```
Easy query 5
Mistral-Nemo response:SELECT
  p.product_name,
  SUM(oc.units) as total_units_sold
FROM
  products p
JOIN
  orders_content oc ON p.product_id = oc.product_id
GROUP BY
  p.product_name
ORDER BY
  total_units_sold DESC;
Llama3.2 response: SELECT T3.product_name ,  SUM(T2.units) FROM orders_content AS T1 INNER JOIN products AS T2 ON T1.product_id = T2.product_id INNER JOIN orders AS T3 ON T1.order_id = T3.order_id GROUP BY T2.product_id ORDER BY SUM(T2.units) DESC
Gemma response:```sql
SELECT
  p.product_name,
  SUM(oc.units) AS total_units_sold
FROM products AS p
JOIN orders_content AS oc
  ON p.product_id = oc.product_id
GROUP BY
  p.product_name
ORDER BY
  total_units_sold DESC;
```
Codellama response:```
SELECT p.product_name, SUM(oc.units) AS total_units
FROM products p
JOIN orders o ON o.order_id = oc.order_id
JOIN orders_content oc ON oc.product_id = p.product_id
GROUP BY oc.product_id
ORDER BY total_units DESC;
```
Easy query 6
Mistral-Nemo response:SELECT first_name, last_name, registration_date
FROM users
ORDER BY registration_date ASC;
Llama3.2 response:SELECT first_name, last_name, registration_date FROM users ORDER BY registration_date ASC;
Gemma response:```sql
SELECT
  user_id,
  registration_date
FROM users
ORDER BY
  registration_date;
```

Codellama response:```
SELECT first_name, last_name, age, registration_date
FROM users ORDER BY registration_date ASC;
```
Easy query 7
Mistral-Nemo response:SELECT p.product_name, p.price
FROM products p
WHERE p.price > 100;
Llama3.2 response:SELECT T1.product_name, T1.price FROM products AS T1 INNER JOIN orders_content AS T2 ON T1.product_id = T2.product_id WHERE T1.price > 100
Gemma response:```sql
SELECT product_name, price
FROM products
WHERE price > 100;
```
Codellama response:Here is a PostgreSQL query that finds all products with a price above $100 and displays their names and prices:
```
SELECT product_name, price
FROM products
WHERE price > 100;
```
Easy query 8
Mistral-Nemo response:```sql
SELECT COUNT(*) FROM users;
```
Llama3.2 response:SELECT COUNT(*) FROM users;
Gemma response:```sql
SELECT COUNT(user_id) FROM users;
```
Codellama response:SELECT COUNT(*) FROM users;
Easy query 9
Mistral-Nemo response:SELECT o.order_id, u.user_id
FROM orders o
JOIN users u ON o.user_id = u.user_id
WHERE o.date = '2025-05-15';
Llama3.2 response:SELECT DISTINCT T1.order_id, T2.user_id FROM orders AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.user_id WHERE T1.date = '2025-05-15'
Gemma response:```sql
SELECT
  o.order_id,
  o.user_id
FROM orders AS o
WHERE
  o.date = '2025-05-15';
```
Codellama response:```sql
SELECT o.order_id, o.user_id
FROM orders o
WHERE date = '2025-05-15';
```
Easy query 10
Mistral-Nemo response:SELECT p.product_name
FROM products p
JOIN orders_content oc ON p.product_id = oc.product_id
WHERE p.product_desc ILIKE '%Premium%';
Llama3.2 response:SELECT T1.product_name FROM products AS T1 INNER JOIN orders_content AS T2 ON T1.product_id = T2.product_id WHERE T1.product_desc LIKE '%Premium%'
Gemma response:```sql
SELECT product_name
FROM products
WHERE product_desc LIKE '%Premium%';
```
Codellama response:Here is a PostgreSQL query that retrieves the product names containing the word "Premium" in their description:
```
SELECT product_name
FROM products
WHERE product_desc LIKE '%Premium%';
``